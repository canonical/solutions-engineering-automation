# This file is centrally managed as a template file in https://github.com/canonical/solutions-engineering-automation
# To update the file:
# - Edit it in the canonical/solutions-engineering-automation repository.
# - Open a PR with the changes.
# - When the PR merges, the soleng-terraform bot will open a PR to the target repositories with the changes.

[tox]
skipsdist=True
skip_missing_interpreters = True
# Run the linters and unit tests by default
envlist = lint, unit

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/src/:{toxinidir}/reactive/:{toxinidir}/hooks/:{toxinidir}/lib/:{toxinidir}/actions:{toxinidir}/files/:{toxinidir}/files/plugins/
passenv =
  CHARM_*
  HOME
  HTTPS_PROXY
  HTTP_PROXY
  MODEL_SETTINGS
  NO_PROXY
  OS_*
  PATH
  PYTEST_*
  SNAP_HTTPS_PROXY
  SNAP_HTTP_PROXY
  TEST_*
  ZAZA_*
  # hardware-observer-operator, func tests
  REDFISH_*
  # hardware-observer-operator, integration tests
  K8S_CONTROLLER
  LXD_CONTROLLER
# TODO: can we just pass through all environment variables? What's the rationale for blocking some?

[testenv:lint]
commands =
    black --check --diff --color .
    isort --check --diff --color .
    flake8
    pylint --recursive=y .
    mypy --install-types --non-interactive .
deps =
    black
    colorama
    flake8
    flake8-colors
    flake8-docstrings
    flake8-import-order
    flake8-pyproject
    isort
    mypy
    pep8-naming
    pylint
    # so pylint and mypy can reason about the code
    {[testenv:unit]deps}
    {[testenv:func]deps}

[testenv:reformat]
commands =
    black .
    isort .
deps =
    black
    isort

[testenv:unit]
# NOTE: for some projects it's currently {toxinidir}src/tests/unit, but we should refactor those projects (charm-prometheus-libvirt-exporter, charm-sysconfig)
# NOTE: for the projects that use `--ignore ...tests/functional`, we can convert that to `tests/unit` and it works.
# NOTE: some projects don't have unit tests (charm-prometheus-blackbox-exporter, layer-filebeat, charm-juju-local), but we can refactor them to include a noop test at least
commands = pytest {toxinidir}/tests/unit \
   -v \
   --cov \
   --cov-report=term-missing \
   --cov-report=html \
   --cov-report=xml \
   {posargs}

deps =
  pytest
  pytest-cov
  -r {toxinidir}/requirements.txt
  -r {toxinidir}/tests/unit/requirements.txt

[testenv:func]
# TODO: openstack-exporter-operator uses tests/integration - this can be refactored to be consistent with others
%{ if functest_type == "zaza" ~}
changedir = {toxinidir}/tests/functional
commands = functest-run-suite {posargs:--keep-model -v}
%{ else ~}%{ if functest_type == "pytest" ~}
commands = pytest {toxinidir}/tests/functional {posargs:-v}
%{ else ~}%{ if functest_type == "none" ~}
allowlist_externals =
    echo
commands = echo "No func tests, skipping."
%{ endif ~}
%{ endif ~}
%{ endif ~}


deps =
  pytest
  pytest-operator
  -r {toxinidir}/tests/functional/requirements.txt

# TODO: hardware-observer-operator uses a separate integration testenv - need to check if that can be rolled into the func test target
